{"version":3,"sources":["components/PaintTitle.js","components/ColorPicker.js","hooks/useWindowSize.js","components/RefreshButton.js","components/Canvas.js","components/Paint.js","components/App.js","index.js"],"names":["React","memo","useState","title","setTitle","className","value","onChange","e","target","onClick","setSelectionRange","length","placeholder","ColorPicker","props","colors","activeColor","setActiveColor","map","color","i","key","name","type","checked","style","background","useWindowSize","callback","window","innerWidth","innerHeight","windowWidth","windowHeight","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","refresh","Canvas","canvasRef","useRef","contextRef","drawing","setDrawing","width","height","setSize","current","getContext","stopDrawing","closePath","ref","onMouseDown","context","lineJoin","lineCap","lineWidth","strokeStyle","beginPath","moveTo","clientX","offsetLeft","clientY","offsetTop","onMouseMove","coords","lineTo","stroke","onMouseUp","onMouseOut","Paint","setColors","visible","setVisible","timeoutId","getColors","useCallback","baseColor","randomColor","slice","fetch","then","res","json","hex","clearTimeout","setTimeout","borderTop","marginTop","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54163c32.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst PaintTitle = () => {\n  const [title, setTitle] = useState('')\n  \n  return (\n    <label className=\"header-name\">\n      <input \n        value={title}\n        onChange={e => setTitle(e.target.value)}\n        onClick={e => e.target.setSelectionRange(0, e.target.value.length)}\n        placeholder=\"Untitled\"\n      />\n    </label>\n  )\n}\n\nexport default React.memo(PaintTitle)","import React from 'react'\n\nconst ColorPicker = props => {\n  // colors 是一组 hex 的 schema 值\n  const { colors, activeColor, setActiveColor } = props\n\n  if (colors.length === 0) {\n    return <h3>Loading...</h3>\n  }\n\n  // radio 使用 onChange 只有在重新选择的时候才会触发, click 为即使在重复选择的时候也会触发对应函数\n  return (\n    <fieldset className=\"color-picker\">\n      {colors.map((color, i) => (\n        <label key={i}>\n          <input\n            name=\"color\"\n            type=\"radio\"\n            value={color}\n            checked={activeColor === color}\n            onChange={e => setActiveColor(e.target.value)}\n          />\n          <span style={{ background: color }} />\n        </label>\n      ))}\n    </fieldset>\n  )\n}\n\nexport default ColorPicker","import { useState, useEffect } from 'react'\n\nconst useWindowSize = callback => {\n  const [[windowWidth, windowHeight], setWindowSize] = useState([window.innerWidth, window.innerHeight])\n\n  useEffect(() => {\n    const handleResize = () => {\n      // callback 为在调整 window size 的时候做的一些其他事情\n      callback()\n      setWindowSize([window.innerWidth, window.innerHeight])\n    }\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [callback])\n\n  return [windowWidth, windowHeight]\n}\n\nexport default useWindowSize","import React from 'react'\n\nconst RefreshButton = props => {\n  const { refresh } = props\n\n  return (\n    <button\n      className=\"button-refresh-colors\"\n      onClick={refresh}\n    >\n      &#8634;\n    </button>\n  )\n}\n\nexport default React.memo(RefreshButton)","import React, { useState, useEffect, useRef } from 'react'\nimport useWindowSize from '../hooks/useWindowSize'\n\nconst Canvas = props => {\n  const canvasRef = useRef()\n  const contextRef = useRef()\n  // const [context, setContext] = useState(null)\n  const [drawing, setDrawing] = useState(false)\n  const [[width, height], setSize] = useState([window.innerWidth, window.innerHeight])\n\n  // 直接使用自定义 hooks\n  useWindowSize(() => {\n    setSize([window.innerWidth, window.innerHeight])\n  })\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      contextRef.current = canvasRef.current.getContext('2d')\n    }\n  }, [canvasRef])\n\n  const startDrawing = e => {\n    const context = contextRef.current\n    context.lineJoin = 'round'\n    context.lineCap = 'round'\n    context.lineWidth = 10\n    context.strokeStyle = props.color\n    context.beginPath()\n\n    context.moveTo(\n      e.clientX - canvasRef.current.offsetLeft,\n      e.clientY - canvasRef.current.offsetTop\n    )\n    setDrawing(true)\n  }\n\n  const processDrawing = e => {\n    const context = contextRef.current\n\n    const coords = [\n      e.clientX - canvasRef.current.offsetLeft,\n      e.clientY - canvasRef.current.offsetTop\n    ]\n\n    if (drawing) {\n      context.lineTo(...coords)\n      context.stroke()\n    }\n  }\n\n  const stopDrawing = e => {\n    const context = contextRef.current\n\n    context.closePath()\n    setDrawing(false)\n  }\n\n  return (\n    <>\n      <canvas\n        ref={canvasRef}\n        width={props.width || width}\n        height={props.height || height}\n        onMouseDown={startDrawing}\n        onMouseMove={processDrawing}\n        onMouseUp={stopDrawing}\n        onMouseOut={stopDrawing}\n      />\n    </>\n  )\n}\n\nexport default Canvas","import React, { useState, useEffect, useCallback, useRef } from 'react'\nimport randomColor from 'randomcolor'\nimport PaintTitle from './PaintTitle'\nimport ColorPicker from './ColorPicker'\nimport useWindowSize from '../hooks/useWindowSize'\nimport RefreshButton from './RefreshButton'\nimport Canvas from './Canvas'\n\nconst Paint = () => {\n  const [colors, setColors] = useState([])\n  const [activeColor, setActiveColor] = useState(null)\n  const [visible, setVisible] = useState(false)\n  // 使用 ref 永远保存最新(之前)的计时器 id\n  let timeoutId = useRef()\n\n  const getColors = useCallback(() => {\n    const baseColor = randomColor().slice(1);\n    fetch(`https://www.thecolorapi.com/scheme?hex=${baseColor}&mode=monochrome`)\n      .then(res => res.json())\n      .then(res => {\n        setColors(res.colors.map(color => color.hex.value))\n        setActiveColor(res.colors[0].hex.value)\n      })\n  }, [])\n\n  useEffect(() => {\n    getColors()\n  }, [getColors])\n\n  const [windowWidth, windowHeight] = useWindowSize(() => {\n    // 设置显示 window size 的文字可见\n    setVisible(true)\n    clearTimeout(timeoutId.current)\n    timeoutId.current = setTimeout(() => {\n      setVisible(false)\n    }, 500)\n  })\n\n  return (\n    <div className=\"app\">\n      <header style={{ borderTop: `10px solid ${activeColor}` }}>\n        <div className=\"app\">\n          <PaintTitle />\n        </div>\n        <div style={{ marginTop: 10 }}>\n          <ColorPicker\n            colors={colors}\n            activeColor={activeColor}\n            setActiveColor={setActiveColor}\n          />\n          <RefreshButton refresh={getColors} />\n        </div>\n      </header>\n\n      {activeColor && (\n        <Canvas\n          color={activeColor}\n        />\n      )}\n\n      <div className={`window-size ${visible ? '' : 'hidden'}`}>\n        {windowWidth} x {windowHeight}\n      </div>\n    </div>\n\n  )\n}\n\nexport default Paint","import React from 'react';\nimport Paint from './Paint'\n\nconst App = () => {\n  return (\n    <Paint />\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}